---

- name: Assert that instance.Uuid is not empty
  ansible.builtin.assert:
    that:
      - ansible_role_vsphere_snapshot_instance_uuid | length > 0
    fail_msg: "instance.Uuid seems to be empty, I'm not a psychic."
  when: ansible_role_vsphere_snapshot_action is defined

- name: Block for create snapshot
  when: (ansible_role_vsphere_snapshot_action is defined and ansible_role_vsphere_snapshot_action | lower == "create")
  block:
    - name: Check that not snapshot memory and quiesce guest file-system are set to true
      ansible.builtin.assert:
        that:
          - not (ansible_role_vsphere_snapshot_snapshot_memory | bool and ansible_role_vsphere_snapshot_quiesce_guest_file_system | bool)
        fail_msg: "ansible_role_vsphere_snapshot_snapshot memory and ansible_role_vsphere_snapshot_quiesce_guest_file_system are mutually exclusive."

    - name: Check that prefix + suffix length is less than 44 chars
      ansible.builtin.assert:
        that:
          - ansible_role_vsphere_snapshot_name_prefix | length + ansible_role_vsphere_snapshot_name_suffix | length < 42
        fail_msg: "the length of ansible_role_vsphere_snapshot_name_prefix + ansible_role_vsphere_snapshot_name_suffix must be less than 44 characters"

    - name: Create snapshot name
      ansible.builtin.set_fact:
        ansible_role_vsphere_snapshot_name: >
          "{{ ansible_role_vsphere_snapshot_name_prefix + lookup('password', '/dev/null chars=ascii_letters,digits') | to_uuid + ansible_role_vsphere_snapshot_name_suffix }}"

    - name: Create a snapshot
      community.vmware.vmware_guest_snapshot:
        hostname: "{{ ansible_role_vsphere_snapshot_vcenter }}"
        username: "{{ ansible_role_vsphere_snapshot_vcenter_username }}"
        password: "{{ ansible_role_vsphere_snapshot_vcenter_password }}"
        datacenter: "{{ ansible_role_vsphere_snapshot_datacenter }}"
        use_instance_uuid: true
        uuid: '{{ ansible_role_vsphere_snapshot_instance_uuid }}'
        state: present
        snapshot_name: '{{ ansible_role_vsphere_snapshot_name }}'
        description: '{{ ansible_role_vsphere_snapshot_description | default(omit) }}'
        validate_certs: "{{ ansible_role_vsphere_snapshot_validate_certs | default('yes') }}"
        port: "{{ ansible_role_vsphere_snapshot_port | default('443') }}"
        proxy_host: "{{ ansible_role_vsphere_snapshot_proxy_host | default(omit) }}"
        proxy_port: "{{ ansible_role_vsphere_snapshot_proxy_port | default(omit) }}"
        quiesce: "{{ ansible_role_vsphere_snapshot_quiesce_guest_file_system | default('false') }}"
        memory_dump: "{{ ansible_role_vsphere_snapshot_snapshot_memory | default('true') }}"
      register: ansible_role_vsphere_snapshot_create
      delegate_to: localhost

    - name: Set fact for ansible_role_vsphere_snapshot_created.
      ansible.builtin.set_fact:
        ansible_role_vsphere_snapshot_created: "{{ 'true' if ansible_role_vsphere_snapshot_create.changed | bool else 'false' }}"


- name: Block for remove snapshot
  when: (ansible_role_vsphere_snapshot_action is defined and ansible_role_vsphere_snapshot_action | lower == "remove")
  block:
    - name: Remove a named snapshot
      community.vmware.vmware_guest_snapshot:
        hostname: "{{ ansible_role_vsphere_snapshot_vcenter }}"
        username: "{{ ansible_role_vsphere_snapshot_vcenter_username }}"
        password: "{{ ansible_role_vsphere_snapshot_vcenter_password }}"
        datacenter: "{{ ansible_role_vsphere_snapshot_datacenter }}"
        use_instance_uuid: true
        uuid: '{{ ansible_role_vsphere_snapshot_instance_uuid }}'
        state: absent
        snapshot_name: '{{ ansible_role_vsphere_snapshot_name }}'
        validate_certs: "{{ ansible_role_vsphere_snapshot_validate_certs | default('yes') }}"
        port: "{{ ansible_role_vsphere_snapshot_port | default('443') }}"
        proxy_host: "{{ ansible_role_vsphere_snapshot_proxy_host | default(omit) }}"
        proxy_port: "{{ ansible_role_vsphere_snapshot_proxy_port | default(omit) }}"
      register: ansible_role_vsphere_snapshot_remove
      delegate_to: localhost

    - name: Set fact for ansible_role_vsphere_snapshot_removed.
      ansible.builtin.set_fact:
        ansible_role_vsphere_snapshot_removed: "{{ 'true' if ansible_role_vsphere_snapshot_remove.changed | bool else 'false' }}"


- name: Block for revert snapshot
  when: (ansible_role_vsphere_snapshot_action is defined and ansible_role_vsphere_snapshot_action | lower == "revert")
  block:
    - name: Revert to a named snapshot.
      community.vmware.vmware_guest_snapshot:
        hostname: "{{ ansible_role_vsphere_snapshot_vcenter }}"
        username: "{{ ansible_role_vsphere_snapshot_vcenter_username }}"
        password: "{{ ansible_role_vsphere_snapshot_vcenter_password }}"
        datacenter: "{{ ansible_role_vsphere_snapshot_datacenter }}"
        use_instance_uuid: true
        uuid: '{{ ansible_role_vsphere_snapshot_instance_uuid }}'
        state: revert
        snapshot_name: '{{ ansible_role_vsphere_snapshot_name }}'
        validate_certs: "{{ ansible_role_vsphere_snapshot_validate_certs | default('yes') }}"
        port: "{{ ansible_role_vsphere_snapshot_port | default('443') }}"
        proxy_host: "{{ ansible_role_vsphere_snapshot_proxy_host | default(omit) }}"
        proxy_port: "{{ ansible_role_vsphere_snapshot_proxy_port | default(omit) }}"
      register: ansible_role_vsphere_snapshot_revert
      delegate_to: localhost

    - name: Set fact for ansible_role_vsphere_snapshot_reverted.
      ansible.builtin.set_fact:
        ansible_role_vsphere_snapshot_reverted: "{{ 'true' if ansible_role_vsphere_snapshot_revert.changed | bool else 'false' }}"

    - name: Sleep for 15 seconds after revert to let things settle for a bit.
      ansible.builtin.wait_for:
        timeout: 15
      delegate_to: localhost

    - name: Optionally remove a named snapshot after revert.
      community.vmware.vmware_guest_snapshot:
        hostname: "{{ ansible_role_vsphere_snapshot_vcenter }}"
        username: "{{ ansible_role_vsphere_snapshot_vcenter_username }}"
        password: "{{ ansible_role_vsphere_snapshot_vcenter_password }}"
        datacenter: "{{ ansible_role_vsphere_snapshot_datacenter }}"
        use_instance_uuid: true
        uuid: '{{ ansible_role_vsphere_snapshot_instance_uuid }}'
        state: absent
        snapshot_name: '{{ ansible_role_vsphere_snapshot_name }}'
        validate_certs: "{{ ansible_role_vsphere_snapshot_validate_certs | default('yes') }}"
        port: "{{ ansible_role_vsphere_snapshot_port | default('443') }}"
        proxy_host: "{{ ansible_role_vsphere_snapshot_proxy_host | default(omit) }}"
        proxy_port: "{{ ansible_role_vsphere_snapshot_proxy_port | default(omit) }}"
      delegate_to: localhost
      register: ansible_role_vsphere_snapshot_remove
      when: ansible_role_vsphere_snapshot_remove_after_revert | bool and ansible_role_vsphere_snapshot_revert.changed | bool

    - name: Set fact for ansible_role_vsphere_snapshot_removed.
      ansible.builtin.set_fact:
        ansible_role_vsphere_snapshot_removed_after_revert: "{{ 'true' if ansible_role_vsphere_snapshot_remove.changed | bool else 'false' }}"
